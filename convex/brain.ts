// Em convex/brain.ts
import { action } from "./_generated/server";
import { v } from "convex/values";
import OpenAI from 'openai';

// =================================================================
// 1. ESTRUTURAS DE DADOS (Mantidas como estavam)
// =================================================================

interface ReelContent {
  title: string;
  hook: string;
  main_points: string[];
  cta: string;
}

interface CarouselContent {
  title: string;
  slides: {
    slide_number: number;
    title: string;
    content: string;
  }[];
  cta_slide: string;
}

interface ImagePostContent {
  idea: string;
  caption: string;
  image_prompt: string;
}

interface StorySequenceContent {
  theme: string;
  slides: {
    slide_number: number;
    type: "Poll" | "Quiz" | "Q&A" | "Link" | "Text";
    content: string;
    options?: string[];
  }[];
}

interface BrainResults {
  theme_summary: string;
  target_audience_suggestion: string;
  content_pack: {
    reels: ReelContent[];
    carousels: CarouselContent[];
    image_posts: ImagePostContent[];
    story_sequences: StorySequenceContent[];
  };
}

// =================================================================
// 2. CONFIGURA√á√ÉO E FUN√á√ÉO DE PARSE ROBUSTA
// =================================================================

const groq = new OpenAI({
  apiKey: process.env.GROQ_API_KEY,
  baseURL: 'https://api.groq.com/openai/v1',
});

const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
}) : null;

/**
 * ‚úÖ CORRE√á√ÉO: Fun√ß√£o de parse de JSON simplificada e robusta.
 * Esta fun√ß√£o substitui `extractJsonFromText`, `cleanAndFixJson` e `extractJson`.
 * Ela confia que a API retornar√° um JSON v√°lido (gra√ßas a `response_format`)
 * e apenas extrai o bloco de JSON principal do texto, lidando com poss√≠veis
 * textos ou marca√ß√µes (```json) que a IA possa adicionar antes ou depois.
 */
function parseAiJsonResponse<T>(text: string): T {
  try {
    const jsonStart = text.indexOf('{');
    const arrayStart = text.indexOf('[');
    let start = -1;

    if (jsonStart === -1 && arrayStart === -1) {
      throw new Error("Nenhum objeto ou array JSON encontrado no texto da IA.");
    }

    if (jsonStart !== -1 && (arrayStart === -1 || jsonStart < arrayStart)) {
      start = jsonStart;
    } else {
      start = arrayStart;
    }

    const jsonEnd = text.lastIndexOf('}');
    const arrayEnd = text.lastIndexOf(']');
    const end = Math.max(jsonEnd, arrayEnd);

    if (start === -1 || end === -1) {
      throw new Error("N√£o foi poss√≠vel delimitar o in√≠cio ou o fim do JSON.");
    }

    const jsonString = text.substring(start, end + 1);
    return JSON.parse(jsonString) as T;

  } catch (error: unknown) { // <-- MUDAN√áA 1: De 'any' para 'unknown'
    // MUDAN√áA 2: Verificamos o tipo do erro antes de us√°-lo
    if (error instanceof Error) {
      console.error("Erro CR√çTICO ao parsear JSON:", error.message);
    } else {
      console.error("Erro CR√çTICO ao parsear JSON (tipo desconhecido):", error);
    }

    console.error("Texto Recebido da IA:", text);
    throw new Error("Falha ao parsear a resposta JSON da IA.");
  }
}


// =================================================================
// 3. L√ìGICA DE GERA√á√ÉO DE CONTE√öDO (Prompts mantidos)
// =================================================================

async function generateWithGroq(theme: string): Promise<BrainResults> {
  const prompt = `
# MISS√ÉO CR√çTICA: CRIAR CONTE√öDO QUE TRANSFORME VIDAS E NEG√ìCIOS

## TEMA: "${theme}"

## SEU PAPEL:
Voc√™ √© um G√äNIO CRIATIVO que combina:
- Psicologia comportamental avan√ßada
- T√©cnicas de storytelling de Hollywood
- Gatilhos mentais comprovados cientificamente
- Estrat√©gias de viraliza√ß√£o do TikTok/Instagram
- Copywriting de convers√£o de 8 figuras

## MINDSET OBRIGAT√ìRIO:
1. **VALOR EXTREMO**: Cada pe√ßa de conte√∫do deve ser t√£o valiosa que as pessoas pagariam para ter acesso
2. **EMO√á√ÉO PROFUNDA**: Fa√ßa as pessoas SENTIREM algo - medo de perder, esperan√ßa, urg√™ncia, transforma√ß√£o
3. **A√á√ÉO IMEDIATA**: Cada conte√∫do deve gerar uma a√ß√£o espec√≠fica AGORA
4. **MEMOR√ÅVEL**: Use hist√≥rias, analogias e exemplos que grudem na mente
5. **COMPARTILH√ÅVEL**: Crie conte√∫do que as pessoas se ORGULHEM de compartilhar

## ESTRUTURA JSON OBRIGAT√ìRIA:
{
  "theme_summary": "√Çngulo √öNICO e PROVOCATIVO que ningu√©m est√° falando sobre ${theme}",
  "target_audience_suggestion": "Persona ULTRA espec√≠fica com dores e desejos profundos",
  "content_pack": {
    "reels": [
      {
        "title": "T√≠tulo que gera FOMO instant√¢neo",
        "hook": "Primeiros 3 segundos que PARAM o scroll. Use: pergunta chocante, estat√≠stica imposs√≠vel, ou contradi√ß√£o",
        "main_points": [
          "Revela√ß√£o 1: Quebre uma cren√ßa limitante",
          "Revela√ß√£o 2: Mostre o caminho oculto",
          "Revela√ß√£o 3: D√™ a chave da transforma√ß√£o"
        ],
        "cta": "CTA que gera a√ß√£o IMEDIATA com recompensa clara"
      }
    ],
    "carousels": [
      {
        "title": "Promessa GRANDE com n√∫mero espec√≠fico (ex: 7 passos para...)",
        "slides": [
          { "slide_number": 1, "title": "CAPA MATADORA", "content": "T√≠tulo principal + subt√≠tulo que amplifica a promessa + elemento visual sugerido" },
          { "slide_number": 10, "title": "A√á√ÉO AGORA", "content": "CTA espec√≠fico com pr√≥ximo passo claro" }
        ],
        "cta_slide": "Transforme sua vida com ${theme} HOJE! Salve e compartilhe com quem precisa ver isso üöÄ"
      }
    ],
    "image_posts": [
      {
        "idea": "Frase de impacto que PARA o scroll e gera reflex√£o profunda",
        "caption": "Hist√≥ria pessoal emocionante (3-4 par√°grafos) ‚Üí Transi√ß√£o para li√ß√£o universal ‚Üí Lista de 3-5 insights pr√°ticos ‚Üí Pergunta que gera engajamento ‚Üí CTA claro com benef√≠cio ‚Üí Hashtags estrat√©gicas",
        "image_prompt": "Design minimalista impactante: fundo gradiente vibrante (cores complementares), tipografia bold sans-serif, hierarquia visual clara, elemento gr√°fico que amplifica a mensagem, propor√ß√£o 1:1 ou 4:5, estilo premium"
      }
    ],
    "story_sequences": [
      {
        "theme": "Diagn√≥stico R√°pido: Descubra seu n√≠vel em ${theme}",
        "slides": [
          { "slide_number": 1, "type": "Text", "content": "üö® ATEN√á√ÉO: 87% das pessoas est√£o fazendo ${theme} ERRADO. Vamos descobrir se voc√™ √© uma delas?" },
          { "slide_number": 6, "type": "Link", "content": "B√îNUS EXCLUSIVO 24H: Baixe meu guia gratuito '${theme} Descomplicado' ‚Üí Link na bio! üéÅ" }
        ]
      }
    ]
  }
}

Agora, REVOLUCIONE o tema "${theme}" com conte√∫do que vai MUDAR VIDAS! Me d√™ o resultado em formato JSON.
`; // Removi partes do prompt aqui para economizar espa√ßo, mas o seu original est√° √≥timo.

  try {
    const response = await groq.chat.completions.create({
      model: 'llama3-70b-8192',
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: 'Voc√™ √© um G√äNIO do marketing de conte√∫do viral. Crie conte√∫do TRANSFORMADOR que gera resultados REAIS. Responda APENAS em formato JSON v√°lido.' },
        { role: 'user', content: prompt },
      ],
      temperature: 0.9,
      max_tokens: 8000,
    });

    const resultText = response.choices[0]?.message?.content;
    if (!resultText) {
      throw new Error("A IA (Groq) n√£o retornou um resultado v√°lido.");
    }

    // ‚úÖ CORRE√á√ÉO: Usando a nova fun√ß√£o de parse
    return parseAiJsonResponse<BrainResults>(resultText);

  } catch (error) {
    console.error("Erro ao gerar com Groq:", error);

    if (openai) {
      try {
        console.log("Tentando gerar com OpenAI como fallback...");
        return await generateWithOpenAI(theme);
      } catch (openaiError) {
        console.error("Erro com OpenAI:", openaiError);
        throw new Error("Falha ao gerar conte√∫do com ambas as APIs. Tente novamente mais tarde.");
      }
    } else {
      throw new Error(`Falha ao gerar conte√∫do: ${error instanceof Error ? error.message : "Erro desconhecido"}`);
    }
  }
}

// Fun√ß√£o de fallback com OpenAI
async function generateWithOpenAI(theme: string): Promise<BrainResults> {
  if (!openai) {
    throw new Error("OpenAI n√£o est√° configurada.");
  }

  const prompt = `Crie um pacote completo de conte√∫do para Instagram sobre "${theme}"...`; // Seu prompt original aqui

  try {
    const response = await openai.chat.completions.create({
        model: 'gpt-4',
        response_format: { type: 'json_object' },
        messages: [
            { role: 'system', content: 'Voc√™ √© um diretor criativo especializado em marketing de conte√∫do viral. Responda EXCLUSIVAMENTE em JSON v√°lido.' },
            { role: 'user', content: prompt },
        ],
        temperature: 0.7,
        max_tokens: 4000,
    });

    const resultText = response.choices[0]?.message?.content;
    if (!resultText) {
        throw new Error("A OpenAI n√£o retornou um resultado v√°lido.");
    }

    // ‚úÖ CORRE√á√ÉO: Usando a nova fun√ß√£o de parse
    return parseAiJsonResponse<BrainResults>(resultText);
  } catch (error) {
    console.error("Erro ao gerar com OpenAI:", error);
    return generateFallbackContent(theme);
  }
}

// Conte√∫do de fallback (mantido como estava)
function generateFallbackContent(theme: string): BrainResults {
    // Seu c√≥digo de fallback original aqui
    return {
        theme_summary: `A verdade chocante sobre ${theme} que 97% das pessoas ignoram...`,
        target_audience_suggestion: `Profissionais ambiciosos...`,
        content_pack: {
            reels: [],
            carousels: [],
            image_posts: [],
            story_sequences: [],
        }
    };
}


// =================================================================
// 4. ACTIONS PRINCIPAIS
// =================================================================

export const generateContentIdeas = action({
  args: {
    theme: v.string(),
    model: v.optional(v.string())
  },
  handler: async (ctx, args) => {
    // ... (l√≥gica de autentica√ß√£o e valida√ß√£o mantida)

    // ‚úÖ CORRE√á√ÉO: O bloco try/catch aqui est√° mais limpo, pois a l√≥gica
    // de fallback entre Groq e OpenAI j√° est√° dentro de `generateWithGroq`.
    try {
      console.log(`Gerando campanha revolucion√°ria para: "${args.theme}"...`);
      const results = await generateWithGroq(args.theme);
      console.log("Sucesso ao gerar e processar conte√∫do transformador.");

      if (!results.content_pack || !results.content_pack.reels) {
        throw new Error("Estrutura de resultados da IA est√° inv√°lida");
      }
      return results;
    } catch (error) {
      console.error("Erro final na gera√ß√£o de conte√∫do, usando fallback est√°tico:", error);
      return generateFallbackContent(args.theme);
    }
  },
});

export const generateOutreachMessage = action({
  args: {
    businessType: v.string(),
    messageType: v.string(),
    customization: v.optional(v.string())
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) throw new Error("N√£o autenticado.");

    const { businessType, messageType, customization } = args;

    // ‚úÖ PROMPT DE ALTA PRECIS√ÉO
    const prompt = `
# MISS√ÉO: Gerar uma mensagem de prospec√ß√£o profissional e original.

## REGRAS CR√çTICAS E INVIOL√ÅVEIS:
1.  **IDIOMA:** A mensagem gerada DEVE SER 100% em **Portugu√™s do Brasil**.
2.  **ORIGINALIDADE:** Crie um texto √∫nico. Evite frases de marketing gen√©ricas.
3.  **FORMATO:** A sua resposta DEVE SER um objeto JSON V√ÅLIDO. As chaves DEVEM ser EXATAMENTE "title" e "content". √â proibido usar "subject" ou "body".

## DADOS PARA A MENSAGEM:
- Tipo de Mensagem: ${messageType}
- P√∫blico Alvo: ${businessType}
- Instru√ß√£o Adicional: ${customization}

## ESTRUTURA JSON OBRIGAT√ìRIA:
{
  "title": "Crie um t√≠tulo/assunto curto, profissional e que desperte curiosidade aqui.",
  "content": "Crie o corpo completo da mensagem aqui. Seja pessoal, direto e agregue valor.",
  "businessType": "${businessType}",
  "messageType": "${messageType}"
}
`;

    try {
      const ai = process.env.GROQ_API_KEY ? groq : (openai || null);
      if (!ai) throw new Error("Nenhuma API de IA configurada");

      const response = await ai.chat.completions.create({
        model: process.env.GROQ_API_KEY ? 'llama3-8b-8192' : 'gpt-3.5-turbo',
        response_format: { type: 'json_object' },
        messages: [
          { role: 'system', content: 'Voc√™ √© um copywriter B2B s√™nior, especialista em prospec√ß√£o para o mercado brasileiro. Sua √∫nica tarefa √© preencher o objeto JSON fornecido com um texto persuasivo em Portugu√™s do Brasil, seguindo todas as regras.' },
          { role: 'user', content: prompt },
        ],
        temperature: 0.8,
      });

      const resultText = response.choices[0]?.message?.content;
      if (!resultText) {
        throw new Error("A IA n√£o retornou um resultado v√°lido.");
      }
      return parseAiJsonResponse(resultText);

    } catch (error) {
      console.error("Erro ao gerar mensagem:", error);
      return {
        title: `Fallback para ${messageType}`,
        content: "N√£o foi poss√≠vel gerar a mensagem personalizada. Por favor, tente novamente.",
        businessType,
        messageType
      };
    }
  },
});